services:
  # ==== Rust Kafka Gateway ====
  kafka-api-gateway:
    network_mode: host
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 512M
    build:
      context: .
      target: kafka-api-gateway
    env_file:
      - .env
    depends_on:
      - broker-1
      - broker-2
      - broker-3

  publish-daemon:
    network_mode: host
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 512M
    build:
      context: .
      target: publish-daemon
    env_file:
      - .env
    command: 
      - --rate=10
      - --concurrency=200
      - --seed=42
    depends_on:
      - kafka-api-gateway

  # ==== Kafka Cluster ====
  controller-1:
    image: apache/kafka:4.1.0
    container_name: controller-1
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 2GB
    environment:
      KAFKA_NODE_ID: 1
      KAFKA_PROCESS_ROLES: controller
      KAFKA_LISTENERS: CONTROLLER://:9093
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_CONTROLLER_LISTENER_NAMES: CONTROLLER
      KAFKA_CONTROLLER_QUORUM_VOTERS: 1@controller-1:9093,2@controller-2:9093,3@controller-3:9093
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
    volumes:
      - ./data/kafka/controller-1:/tmp/kafka-logs
    healthcheck:
      test: ["CMD-SHELL", "bash -c '</dev/tcp/localhost/9093'"]
      interval: 30s
      timeout: 5s
      retries: 10
      start_period: 10s

  controller-2:
    image: apache/kafka:4.1.0
    container_name: controller-2
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 2GB
    environment:
      KAFKA_NODE_ID: 2
      KAFKA_PROCESS_ROLES: controller
      KAFKA_LISTENERS: CONTROLLER://:9093
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_CONTROLLER_LISTENER_NAMES: CONTROLLER
      KAFKA_CONTROLLER_QUORUM_VOTERS: 1@controller-1:9093,2@controller-2:9093,3@controller-3:9093
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
    volumes:
      - ./data/kafka/controller-2:/tmp/kafka-logs
    healthcheck:
      test: ["CMD-SHELL", "bash -c '</dev/tcp/localhost/9093'"]
      interval: 30s
      timeout: 5s
      retries: 10
      start_period: 10s

  controller-3:
    image: apache/kafka:4.1.0
    container_name: controller-3
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 2GB
    environment:
      KAFKA_NODE_ID: 3
      KAFKA_PROCESS_ROLES: controller
      KAFKA_LISTENERS: CONTROLLER://:9093
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_CONTROLLER_LISTENER_NAMES: CONTROLLER
      KAFKA_CONTROLLER_QUORUM_VOTERS: 1@controller-1:9093,2@controller-2:9093,3@controller-3:9093
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
    volumes:
      - ./data/kafka/controller-3:/tmp/kafka-logs
    healthcheck:
      test: ["CMD-SHELL", "bash -c '</dev/tcp/localhost/9093'"]
      interval: 30s
      timeout: 5s
      retries: 10
      start_period: 10s

  broker-1:
    image: apache/kafka:4.1.0
    container_name: broker-1
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 2GB
    ports:
      - 29092:9092
    environment:
      KAFKA_NODE_ID: 4
      KAFKA_PROCESS_ROLES: broker
      KAFKA_LISTENERS: 'PLAINTEXT://:19092,PLAINTEXT_HOST://:9092'
      KAFKA_ADVERTISED_LISTENERS: 'PLAINTEXT://broker-1:19092,PLAINTEXT_HOST://localhost:29092'
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_CONTROLLER_LISTENER_NAMES: CONTROLLER
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_CONTROLLER_QUORUM_VOTERS: 1@controller-1:9093,2@controller-2:9093,3@controller-3:9093
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
    depends_on:
      controller-1:
        condition: service_healthy
      controller-2:
        condition: service_healthy
      controller-3:
        condition: service_healthy
    volumes:
      - ./data/kafka/broker-1:/tmp/kafka-logs

  broker-2:
    image: apache/kafka:4.1.0
    container_name: broker-2
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 2GB
    ports:
      - 39092:9092
    environment:
      KAFKA_NODE_ID: 5
      KAFKA_PROCESS_ROLES: broker
      KAFKA_LISTENERS: 'PLAINTEXT://:19092,PLAINTEXT_HOST://:9092'
      KAFKA_ADVERTISED_LISTENERS: 'PLAINTEXT://broker-2:19092,PLAINTEXT_HOST://localhost:39092'
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_CONTROLLER_LISTENER_NAMES: CONTROLLER
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_CONTROLLER_QUORUM_VOTERS: 1@controller-1:9093,2@controller-2:9093,3@controller-3:9093
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
    depends_on:
      controller-1:
        condition: service_healthy
      controller-2:
        condition: service_healthy
      controller-3:
        condition: service_healthy
    volumes:
      - ./data/kafka/broker-2:/tmp/kafka-logs

  broker-3:
    image: apache/kafka:4.1.0
    container_name: broker-3
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 2GB
    ports:
      - 49092:9092
    environment:
      KAFKA_NODE_ID: 6
      KAFKA_PROCESS_ROLES: broker
      KAFKA_LISTENERS: 'PLAINTEXT://:19092,PLAINTEXT_HOST://:9092'
      KAFKA_ADVERTISED_LISTENERS: 'PLAINTEXT://broker-3:19092,PLAINTEXT_HOST://localhost:49092'
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_CONTROLLER_LISTENER_NAMES: CONTROLLER
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_CONTROLLER_QUORUM_VOTERS: 1@controller-1:9093,2@controller-2:9093,3@controller-3:9093
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
    depends_on:
      controller-1:
        condition: service_healthy
      controller-2:
        condition: service_healthy
      controller-3:
        condition: service_healthy
    volumes:
      - ./data/kafka/broker-3:/tmp/kafka-logs

  kafka-ui:
    container_name: kafka-ui
    image: provectuslabs/kafka-ui:latest
    network_mode: host
    environment:
      SERVER_PORT: 8081
      DYNAMIC_CONFIG_ENABLED: 'true'
    volumes:
      - ./kui:/etc/kafkaui

  # ==== Spark Cluster with Object Storage ====
  spark-stream:
    build:
      context: .
      target: python-app
    # network_mode: host
    environment:
      - KAFKA_TOPIC=reviews
    env_file:
      - .env
    ports:
      - 4040:4040
    depends_on:
      - broker-1
      - broker-2
      - broker-3
      - minio
      - spark-driver
      - spark-worker
      - mongodb

  spark-driver:
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 4GB
    image: apache/spark:4.0.0
    hostname: driver
    command: [
      "/opt/spark/bin/spark-class",
      "org.apache.spark.deploy.master.Master",
      "--host", "driver",
      "--port", "7077",
      "--webui-port", "8080"
    ]
    ports:
      - 8088:8080
      - 7077:7077

  spark-worker:
    image: apache/spark:4.0.0
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 2GB
    command: [
      "/opt/spark/bin/spark-class",
      "org.apache.spark.deploy.worker.Worker",
      "--webui-port", "8080",
      "spark://driver:7077",
    ]
    environment:
      - SPARK_WORKER_CORES=2
      - SPARK_WORKER_MEMORY=2g
    depends_on:
      - spark-driver

  minio:
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 2GB
    image: minio/minio:RELEASE.2025-07-23T15-54-02Z-cpuv1
    ports:
      - 9999:9000
      - 9001:9001
    command: server /data --console-address ":9001"
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin123
    volumes:
      - ./data/minio:/data
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 10s

  # ==== WebApp to view aggregated score ====
  mongodb:
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 2GB
    image: mongo:8.0.13-noble
    ports:
      - 27017:27017
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: example
    volumes:
      - ./data/mongodb:/data/db

  webapp:
    build:
      context: .
      target: webapp
    env_file:
      - .env
    ports:
      - 3000:3000
    depends_on:
      - mongodb